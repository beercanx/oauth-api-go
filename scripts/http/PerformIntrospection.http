### Introspect access and refresh tokens
@scope=basic
@client_id=aardvark
@username=aardvark

< {%
    request.variables.set('tokens', [
        {type: 'access_token', value: client.global.get('access_token')},
        {type: 'refresh_token', value: client.global.get('refresh_token')},
    ]);
%}

// @no-redirect
// @no-cookie-jar
POST {{baseUrl}}/introspect
Content-Type: application/x-www-form-urlencoded
Accept: application/json

token = {{$.tokens..value}}

> {%
    client.log(`Iteration: ${request.iteration()}`);

    /** @type {{type: string, value: string}} */
    const token = request.variables.get('tokens')[request.iteration()];
    client.log(`Token: ${JSON.stringify(token)}`);

    client.test(`${token.type} response has 200 status`, () => {
        client.assert(response.status === 200, `Actual is ${response.status}`);
    });

    client.test(`${token.type} response has application/json content type`, () => {
        const contentType = response.headers.valueOf('content-type');
        client.assert(contentType == 'application/json; charset=utf-8', `Actual is ${contentType}`);
    });

    const assertBodyHasField = (field, expected) => {
        client.test(`${token.type} body has ${field} ${expected}`, () => {
            client.assert(response.body.hasOwnProperty(field), `Cannot find '${field}' in body: ${JSON.stringify(response.body)}`);
            client.assert(expected == response.body[field], `Expected [${expected}] but actual is [${response.body[field]}]`)
        });
    };

    assertBodyHasField('active', true);
    assertBodyHasField('scope', request.variables.get('scope'));
    assertBodyHasField('client_id', request.variables.get('client_id'));
    assertBodyHasField('username', request.variables.get('username'));
    assertBodyHasField('sub', request.variables.get('username'));
    assertBodyHasField('token_type', 'bearer');
%}
