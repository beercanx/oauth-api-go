### Password Grant

< {%
    client.global.clear('access_token');
    client.global.clear('refresh_token');
    client.global.clear('scope');
    client.global.clear('username');
    client.global.clear('client_id');

    request.variables.set('username', 'aardvark');
    request.variables.set('password', 'P@55w0rd');
    request.variables.set('state', $uuid);
    request.variables.set('scope', 'basic');
    request.variables.set('client_id', 'aardvark');
    request.variables.set('client_secret', 'badger');
%}

// @no-redirect
// @no-cookie-jar
POST {{baseUrl}}/token
Authorization: Basic {{client_id}} {{client_secret}}
Content-Type: application/x-www-form-urlencoded
Accept: application/json

grant_type = password &
scope = {{scope}} &
username = {{username}} &
password = {{password}} &
state = {{state}}

> {%
    client.test(`response has 200 status`, () => {
        client.assert(response.status === 200, `Actual is ${response.status}`);
    });

    client.test(`response has application/json content type`, () => {
        const contentType = response.headers.valueOf('content-type');
        client.assert(contentType == 'application/json; charset=utf-8', `Actual is ${contentType}`);
    });

    const assertBodyHasToken = (type) => {
        client.test(`body has ${type} field`, () => {
            client.assert(response.body.hasOwnProperty(type), `Cannot find '${type}' in body: ${JSON.stringify(response.body)}`);
            client.global.set(type, response.body[type]);
        });
    };

    assertBodyHasToken('access_token');
    assertBodyHasToken('refresh_token');

    const assertBodyHasField = (field, expected, save = false) => {
        client.test(`body has ${field} ${expected}`, () => {
            client.assert(response.body.hasOwnProperty(field), `Cannot find '${field}' in body: ${JSON.stringify(response.body)}`);
            client.assert(expected == response.body[field], `Expected [${expected}] but actual is [${response.body[field]}]`);
            if (save) client.global.set(field, response.body[field]);
        });
    };

    assertBodyHasField('token_type', 'bearer');
    assertBodyHasField('expires_in', 7200);
    assertBodyHasField('scope', request.variables.get('scope'), true);
    assertBodyHasField('state', request.variables.get('state'));

    client.global.set('username', request.variables.get('username'));
    client.global.set('client_id', request.variables.get('client_id'));
%}
