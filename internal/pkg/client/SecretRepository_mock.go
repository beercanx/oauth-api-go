// Code generated by mockery. DO NOT EDIT.

package client

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockSecretRepository is an autogenerated mock type for the SecretRepository type
type MockSecretRepository struct {
	mock.Mock
}

type MockSecretRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretRepository) EXPECT() *MockSecretRepository_Expecter {
	return &MockSecretRepository_Expecter{mock: &_m.Mock}
}

// FindByClient provides a mock function with given fields: _a0
func (_m *MockSecretRepository) FindByClient(_a0 Id) ([]Secret, bool) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindByClient")
	}

	var r0 []Secret
	var r1 bool
	if rf, ok := ret.Get(0).(func(Id) ([]Secret, bool)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(Id) []Secret); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(Id) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockSecretRepository_FindByClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByClient'
type MockSecretRepository_FindByClient_Call struct {
	*mock.Call
}

// FindByClient is a helper method to define mock.On call
//   - _a0 Id
func (_e *MockSecretRepository_Expecter) FindByClient(_a0 interface{}) *MockSecretRepository_FindByClient_Call {
	return &MockSecretRepository_FindByClient_Call{Call: _e.mock.On("FindByClient", _a0)}
}

func (_c *MockSecretRepository_FindByClient_Call) Run(run func(_a0 Id)) *MockSecretRepository_FindByClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Id))
	})
	return _c
}

func (_c *MockSecretRepository_FindByClient_Call) Return(_a0 []Secret, _a1 bool) *MockSecretRepository_FindByClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretRepository_FindByClient_Call) RunAndReturn(run func(Id) ([]Secret, bool)) *MockSecretRepository_FindByClient_Call {
	_c.Call.Return(run)
	return _c
}

// FindByClientId provides a mock function with given fields: clientId
func (_m *MockSecretRepository) FindByClientId(clientId string) ([]Secret, bool) {
	ret := _m.Called(clientId)

	if len(ret) == 0 {
		panic("no return value specified for FindByClientId")
	}

	var r0 []Secret
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) ([]Secret, bool)); ok {
		return rf(clientId)
	}
	if rf, ok := ret.Get(0).(func(string) []Secret); ok {
		r0 = rf(clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(clientId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockSecretRepository_FindByClientId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByClientId'
type MockSecretRepository_FindByClientId_Call struct {
	*mock.Call
}

// FindByClientId is a helper method to define mock.On call
//   - clientId string
func (_e *MockSecretRepository_Expecter) FindByClientId(clientId interface{}) *MockSecretRepository_FindByClientId_Call {
	return &MockSecretRepository_FindByClientId_Call{Call: _e.mock.On("FindByClientId", clientId)}
}

func (_c *MockSecretRepository_FindByClientId_Call) Run(run func(clientId string)) *MockSecretRepository_FindByClientId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSecretRepository_FindByClientId_Call) Return(_a0 []Secret, _a1 bool) *MockSecretRepository_FindByClientId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretRepository_FindByClientId_Call) RunAndReturn(run func(string) ([]Secret, bool)) *MockSecretRepository_FindByClientId_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockSecretRepository) FindById(id uuid.UUID) (Secret, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 Secret
	var r1 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) (Secret, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) Secret); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Secret)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockSecretRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockSecretRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockSecretRepository_Expecter) FindById(id interface{}) *MockSecretRepository_FindById_Call {
	return &MockSecretRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockSecretRepository_FindById_Call) Run(run func(id uuid.UUID)) *MockSecretRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockSecretRepository_FindById_Call) Return(_a0 Secret, _a1 bool) *MockSecretRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSecretRepository_FindById_Call) RunAndReturn(run func(uuid.UUID) (Secret, bool)) *MockSecretRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretRepository creates a new instance of MockSecretRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretRepository {
	mock := &MockSecretRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
