// Code generated by mockery. DO NOT EDIT.

package client

import mock "github.com/stretchr/testify/mock"

// MockPrincipalRepository is an autogenerated mock type for the PrincipalRepository type
type MockPrincipalRepository struct {
	mock.Mock
}

type MockPrincipalRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrincipalRepository) EXPECT() *MockPrincipalRepository_Expecter {
	return &MockPrincipalRepository_Expecter{mock: &_m.Mock}
}

// FindByClientId provides a mock function with given fields: clientId
func (_m *MockPrincipalRepository) FindByClientId(clientId string) (Principal, bool) {
	ret := _m.Called(clientId)

	if len(ret) == 0 {
		panic("no return value specified for FindByClientId")
	}

	var r0 Principal
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (Principal, bool)); ok {
		return rf(clientId)
	}
	if rf, ok := ret.Get(0).(func(string) Principal); ok {
		r0 = rf(clientId)
	} else {
		r0 = ret.Get(0).(Principal)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(clientId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPrincipalRepository_FindByClientId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByClientId'
type MockPrincipalRepository_FindByClientId_Call struct {
	*mock.Call
}

// FindByClientId is a helper method to define mock.On call
//   - clientId string
func (_e *MockPrincipalRepository_Expecter) FindByClientId(clientId interface{}) *MockPrincipalRepository_FindByClientId_Call {
	return &MockPrincipalRepository_FindByClientId_Call{Call: _e.mock.On("FindByClientId", clientId)}
}

func (_c *MockPrincipalRepository_FindByClientId_Call) Run(run func(clientId string)) *MockPrincipalRepository_FindByClientId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPrincipalRepository_FindByClientId_Call) Return(_a0 Principal, _a1 bool) *MockPrincipalRepository_FindByClientId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrincipalRepository_FindByClientId_Call) RunAndReturn(run func(string) (Principal, bool)) *MockPrincipalRepository_FindByClientId_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockPrincipalRepository) FindById(id Id) (Principal, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 Principal
	var r1 bool
	if rf, ok := ret.Get(0).(func(Id) (Principal, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(Id) Principal); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Principal)
	}

	if rf, ok := ret.Get(1).(func(Id) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockPrincipalRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockPrincipalRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id Id
func (_e *MockPrincipalRepository_Expecter) FindById(id interface{}) *MockPrincipalRepository_FindById_Call {
	return &MockPrincipalRepository_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockPrincipalRepository_FindById_Call) Run(run func(id Id)) *MockPrincipalRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Id))
	})
	return _c
}

func (_c *MockPrincipalRepository_FindById_Call) Return(_a0 Principal, _a1 bool) *MockPrincipalRepository_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrincipalRepository_FindById_Call) RunAndReturn(run func(Id) (Principal, bool)) *MockPrincipalRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrincipalRepository creates a new instance of MockPrincipalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrincipalRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrincipalRepository {
	mock := &MockPrincipalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
