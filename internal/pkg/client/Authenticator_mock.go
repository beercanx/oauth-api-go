// Code generated by mockery. DO NOT EDIT.

package client

import mock "github.com/stretchr/testify/mock"

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// AuthenticateAsConfidential provides a mock function with given fields: clientId, clientSecret
func (_m *MockAuthenticator) AuthenticateAsConfidential(clientId string, clientSecret string) (Principal, bool) {
	ret := _m.Called(clientId, clientSecret)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateAsConfidential")
	}

	var r0 Principal
	var r1 bool
	if rf, ok := ret.Get(0).(func(string, string) (Principal, bool)); ok {
		return rf(clientId, clientSecret)
	}
	if rf, ok := ret.Get(0).(func(string, string) Principal); ok {
		r0 = rf(clientId, clientSecret)
	} else {
		r0 = ret.Get(0).(Principal)
	}

	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(clientId, clientSecret)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockAuthenticator_AuthenticateAsConfidential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateAsConfidential'
type MockAuthenticator_AuthenticateAsConfidential_Call struct {
	*mock.Call
}

// AuthenticateAsConfidential is a helper method to define mock.On call
//   - clientId string
//   - clientSecret string
func (_e *MockAuthenticator_Expecter) AuthenticateAsConfidential(clientId interface{}, clientSecret interface{}) *MockAuthenticator_AuthenticateAsConfidential_Call {
	return &MockAuthenticator_AuthenticateAsConfidential_Call{Call: _e.mock.On("AuthenticateAsConfidential", clientId, clientSecret)}
}

func (_c *MockAuthenticator_AuthenticateAsConfidential_Call) Run(run func(clientId string, clientSecret string)) *MockAuthenticator_AuthenticateAsConfidential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticator_AuthenticateAsConfidential_Call) Return(_a0 Principal, _a1 bool) *MockAuthenticator_AuthenticateAsConfidential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_AuthenticateAsConfidential_Call) RunAndReturn(run func(string, string) (Principal, bool)) *MockAuthenticator_AuthenticateAsConfidential_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticateAsPublic provides a mock function with given fields: clientId
func (_m *MockAuthenticator) AuthenticateAsPublic(clientId string) (Principal, bool) {
	ret := _m.Called(clientId)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateAsPublic")
	}

	var r0 Principal
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (Principal, bool)); ok {
		return rf(clientId)
	}
	if rf, ok := ret.Get(0).(func(string) Principal); ok {
		r0 = rf(clientId)
	} else {
		r0 = ret.Get(0).(Principal)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(clientId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockAuthenticator_AuthenticateAsPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateAsPublic'
type MockAuthenticator_AuthenticateAsPublic_Call struct {
	*mock.Call
}

// AuthenticateAsPublic is a helper method to define mock.On call
//   - clientId string
func (_e *MockAuthenticator_Expecter) AuthenticateAsPublic(clientId interface{}) *MockAuthenticator_AuthenticateAsPublic_Call {
	return &MockAuthenticator_AuthenticateAsPublic_Call{Call: _e.mock.On("AuthenticateAsPublic", clientId)}
}

func (_c *MockAuthenticator_AuthenticateAsPublic_Call) Run(run func(clientId string)) *MockAuthenticator_AuthenticateAsPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthenticator_AuthenticateAsPublic_Call) Return(_a0 Principal, _a1 bool) *MockAuthenticator_AuthenticateAsPublic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_AuthenticateAsPublic_Call) RunAndReturn(run func(string) (Principal, bool)) *MockAuthenticator_AuthenticateAsPublic_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
