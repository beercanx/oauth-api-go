// Code generated by mockery. DO NOT EDIT.

package token

import (
	client "baconi.co.uk/oauth/internal/pkg/client"
	mock "github.com/stretchr/testify/mock"

	scope "baconi.co.uk/oauth/internal/pkg/scope"

	time "time"

	user "baconi.co.uk/oauth/internal/pkg/user"

	uuid "github.com/google/uuid"
)

// MockToken is an autogenerated mock type for the Token type
type MockToken struct {
	mock.Mock
}

type MockToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockToken) EXPECT() *MockToken_Expecter {
	return &MockToken_Expecter{mock: &_m.Mock}
}

// GetClientId provides a mock function with no fields
func (_m *MockToken) GetClientId() client.Id {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientId")
	}

	var r0 client.Id
	if rf, ok := ret.Get(0).(func() client.Id); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(client.Id)
	}

	return r0
}

// MockToken_GetClientId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientId'
type MockToken_GetClientId_Call struct {
	*mock.Call
}

// GetClientId is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetClientId() *MockToken_GetClientId_Call {
	return &MockToken_GetClientId_Call{Call: _e.mock.On("GetClientId")}
}

func (_c *MockToken_GetClientId_Call) Run(run func()) *MockToken_GetClientId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetClientId_Call) Return(_a0 client.Id) *MockToken_GetClientId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetClientId_Call) RunAndReturn(run func() client.Id) *MockToken_GetClientId_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpiresAt provides a mock function with no fields
func (_m *MockToken) GetExpiresAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpiresAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockToken_GetExpiresAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpiresAt'
type MockToken_GetExpiresAt_Call struct {
	*mock.Call
}

// GetExpiresAt is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetExpiresAt() *MockToken_GetExpiresAt_Call {
	return &MockToken_GetExpiresAt_Call{Call: _e.mock.On("GetExpiresAt")}
}

func (_c *MockToken_GetExpiresAt_Call) Run(run func()) *MockToken_GetExpiresAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetExpiresAt_Call) Return(_a0 time.Time) *MockToken_GetExpiresAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetExpiresAt_Call) RunAndReturn(run func() time.Time) *MockToken_GetExpiresAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuedAt provides a mock function with no fields
func (_m *MockToken) GetIssuedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIssuedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockToken_GetIssuedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuedAt'
type MockToken_GetIssuedAt_Call struct {
	*mock.Call
}

// GetIssuedAt is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetIssuedAt() *MockToken_GetIssuedAt_Call {
	return &MockToken_GetIssuedAt_Call{Call: _e.mock.On("GetIssuedAt")}
}

func (_c *MockToken_GetIssuedAt_Call) Run(run func()) *MockToken_GetIssuedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetIssuedAt_Call) Return(_a0 time.Time) *MockToken_GetIssuedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetIssuedAt_Call) RunAndReturn(run func() time.Time) *MockToken_GetIssuedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotBefore provides a mock function with no fields
func (_m *MockToken) GetNotBefore() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotBefore")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockToken_GetNotBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotBefore'
type MockToken_GetNotBefore_Call struct {
	*mock.Call
}

// GetNotBefore is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetNotBefore() *MockToken_GetNotBefore_Call {
	return &MockToken_GetNotBefore_Call{Call: _e.mock.On("GetNotBefore")}
}

func (_c *MockToken_GetNotBefore_Call) Run(run func()) *MockToken_GetNotBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetNotBefore_Call) Return(_a0 time.Time) *MockToken_GetNotBefore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetNotBefore_Call) RunAndReturn(run func() time.Time) *MockToken_GetNotBefore_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopes provides a mock function with no fields
func (_m *MockToken) GetScopes() []scope.Scope {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScopes")
	}

	var r0 []scope.Scope
	if rf, ok := ret.Get(0).(func() []scope.Scope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]scope.Scope)
		}
	}

	return r0
}

// MockToken_GetScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopes'
type MockToken_GetScopes_Call struct {
	*mock.Call
}

// GetScopes is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetScopes() *MockToken_GetScopes_Call {
	return &MockToken_GetScopes_Call{Call: _e.mock.On("GetScopes")}
}

func (_c *MockToken_GetScopes_Call) Run(run func()) *MockToken_GetScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetScopes_Call) Return(_a0 []scope.Scope) *MockToken_GetScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetScopes_Call) RunAndReturn(run func() []scope.Scope) *MockToken_GetScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsername provides a mock function with no fields
func (_m *MockToken) GetUsername() user.AuthenticatedUsername {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsername")
	}

	var r0 user.AuthenticatedUsername
	if rf, ok := ret.Get(0).(func() user.AuthenticatedUsername); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(user.AuthenticatedUsername)
	}

	return r0
}

// MockToken_GetUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsername'
type MockToken_GetUsername_Call struct {
	*mock.Call
}

// GetUsername is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetUsername() *MockToken_GetUsername_Call {
	return &MockToken_GetUsername_Call{Call: _e.mock.On("GetUsername")}
}

func (_c *MockToken_GetUsername_Call) Run(run func()) *MockToken_GetUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetUsername_Call) Return(_a0 user.AuthenticatedUsername) *MockToken_GetUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetUsername_Call) RunAndReturn(run func() user.AuthenticatedUsername) *MockToken_GetUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with no fields
func (_m *MockToken) GetValue() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MockToken_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockToken_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetValue() *MockToken_GetValue_Call {
	return &MockToken_GetValue_Call{Call: _e.mock.On("GetValue")}
}

func (_c *MockToken_GetValue_Call) Run(run func()) *MockToken_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetValue_Call) Return(_a0 uuid.UUID) *MockToken_GetValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetValue_Call) RunAndReturn(run func() uuid.UUID) *MockToken_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockToken creates a new instance of MockToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockToken {
	mock := &MockToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
