// Code generated by mockery. DO NOT EDIT.

package token

import (
	client "baconi.co.uk/oauth/internal/pkg/client"
	mock "github.com/stretchr/testify/mock"

	scope "baconi.co.uk/oauth/internal/pkg/scope"

	user "baconi.co.uk/oauth/internal/pkg/user"
)

// MockIssuer is an autogenerated mock type for the Issuer type
type MockIssuer[T Token] struct {
	mock.Mock
}

type MockIssuer_Expecter[T Token] struct {
	mock *mock.Mock
}

func (_m *MockIssuer[T]) EXPECT() *MockIssuer_Expecter[T] {
	return &MockIssuer_Expecter[T]{mock: &_m.Mock}
}

// Issue provides a mock function with given fields: username, clientId, scopes
func (_m *MockIssuer[T]) Issue(username user.AuthenticatedUsername, clientId client.Id, scopes scope.Scopes) (T, error) {
	ret := _m.Called(username, clientId, scopes)

	if len(ret) == 0 {
		panic("no return value specified for Issue")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(user.AuthenticatedUsername, client.Id, scope.Scopes) (T, error)); ok {
		return rf(username, clientId, scopes)
	}
	if rf, ok := ret.Get(0).(func(user.AuthenticatedUsername, client.Id, scope.Scopes) T); ok {
		r0 = rf(username, clientId, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(user.AuthenticatedUsername, client.Id, scope.Scopes) error); ok {
		r1 = rf(username, clientId, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIssuer_Issue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Issue'
type MockIssuer_Issue_Call[T Token] struct {
	*mock.Call
}

// Issue is a helper method to define mock.On call
//   - username user.AuthenticatedUsername
//   - clientId client.Id
//   - scopes scope.Scopes
func (_e *MockIssuer_Expecter[T]) Issue(username interface{}, clientId interface{}, scopes interface{}) *MockIssuer_Issue_Call[T] {
	return &MockIssuer_Issue_Call[T]{Call: _e.mock.On("Issue", username, clientId, scopes)}
}

func (_c *MockIssuer_Issue_Call[T]) Run(run func(username user.AuthenticatedUsername, clientId client.Id, scopes scope.Scopes)) *MockIssuer_Issue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.AuthenticatedUsername), args[1].(client.Id), args[2].(scope.Scopes))
	})
	return _c
}

func (_c *MockIssuer_Issue_Call[T]) Return(_a0 T, _a1 error) *MockIssuer_Issue_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIssuer_Issue_Call[T]) RunAndReturn(run func(user.AuthenticatedUsername, client.Id, scope.Scopes) (T, error)) *MockIssuer_Issue_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockIssuer creates a new instance of MockIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIssuer[T Token](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIssuer[T] {
	mock := &MockIssuer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
