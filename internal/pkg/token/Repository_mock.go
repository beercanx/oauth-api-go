// Code generated by mockery. DO NOT EDIT.

package token

import (
	client "baconi.co.uk/oauth/internal/pkg/client"
	mock "github.com/stretchr/testify/mock"

	user "baconi.co.uk/oauth/internal/pkg/user"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository[T Token] struct {
	mock.Mock
}

type MockRepository_Expecter[T Token] struct {
	mock *mock.Mock
}

func (_m *MockRepository[T]) EXPECT() *MockRepository_Expecter[T] {
	return &MockRepository_Expecter[T]{mock: &_m.Mock}
}

// DeleteById provides a mock function with given fields: id
func (_m *MockRepository[T]) DeleteById(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockRepository_DeleteById_Call[T Token] struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockRepository_Expecter[T]) DeleteById(id interface{}) *MockRepository_DeleteById_Call[T] {
	return &MockRepository_DeleteById_Call[T]{Call: _e.mock.On("DeleteById", id)}
}

func (_c *MockRepository_DeleteById_Call[T]) Run(run func(id uuid.UUID)) *MockRepository_DeleteById_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_DeleteById_Call[T]) Return(_a0 error) *MockRepository_DeleteById_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteById_Call[T]) RunAndReturn(run func(uuid.UUID) error) *MockRepository_DeleteById_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DeleteByRecord provides a mock function with given fields: record
func (_m *MockRepository[T]) DeleteByRecord(record T) error {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeleteByRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByRecord'
type MockRepository_DeleteByRecord_Call[T Token] struct {
	*mock.Call
}

// DeleteByRecord is a helper method to define mock.On call
//   - record T
func (_e *MockRepository_Expecter[T]) DeleteByRecord(record interface{}) *MockRepository_DeleteByRecord_Call[T] {
	return &MockRepository_DeleteByRecord_Call[T]{Call: _e.mock.On("DeleteByRecord", record)}
}

func (_c *MockRepository_DeleteByRecord_Call[T]) Run(run func(record T)) *MockRepository_DeleteByRecord_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockRepository_DeleteByRecord_Call[T]) Return(_a0 error) *MockRepository_DeleteByRecord_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeleteByRecord_Call[T]) RunAndReturn(run func(T) error) *MockRepository_DeleteByRecord_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DeletedExpired provides a mock function with no fields
func (_m *MockRepository[T]) DeletedExpired() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeletedExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_DeletedExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletedExpired'
type MockRepository_DeletedExpired_Call[T Token] struct {
	*mock.Call
}

// DeletedExpired is a helper method to define mock.On call
func (_e *MockRepository_Expecter[T]) DeletedExpired() *MockRepository_DeletedExpired_Call[T] {
	return &MockRepository_DeletedExpired_Call[T]{Call: _e.mock.On("DeletedExpired")}
}

func (_c *MockRepository_DeletedExpired_Call[T]) Run(run func()) *MockRepository_DeletedExpired_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_DeletedExpired_Call[T]) Return(_a0 error) *MockRepository_DeletedExpired_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_DeletedExpired_Call[T]) RunAndReturn(run func() error) *MockRepository_DeletedExpired_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FindAllByClientId provides a mock function with given fields: clientId
func (_m *MockRepository[T]) FindAllByClientId(clientId client.Id) ([]T, error) {
	ret := _m.Called(clientId)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByClientId")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(client.Id) ([]T, error)); ok {
		return rf(clientId)
	}
	if rf, ok := ret.Get(0).(func(client.Id) []T); ok {
		r0 = rf(clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(client.Id) error); ok {
		r1 = rf(clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindAllByClientId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByClientId'
type MockRepository_FindAllByClientId_Call[T Token] struct {
	*mock.Call
}

// FindAllByClientId is a helper method to define mock.On call
//   - clientId client.Id
func (_e *MockRepository_Expecter[T]) FindAllByClientId(clientId interface{}) *MockRepository_FindAllByClientId_Call[T] {
	return &MockRepository_FindAllByClientId_Call[T]{Call: _e.mock.On("FindAllByClientId", clientId)}
}

func (_c *MockRepository_FindAllByClientId_Call[T]) Run(run func(clientId client.Id)) *MockRepository_FindAllByClientId_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Id))
	})
	return _c
}

func (_c *MockRepository_FindAllByClientId_Call[T]) Return(_a0 []T, _a1 error) *MockRepository_FindAllByClientId_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindAllByClientId_Call[T]) RunAndReturn(run func(client.Id) ([]T, error)) *MockRepository_FindAllByClientId_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FindAllByUsername provides a mock function with given fields: username
func (_m *MockRepository[T]) FindAllByUsername(username user.AuthenticatedUsername) ([]T, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByUsername")
	}

	var r0 []T
	var r1 error
	if rf, ok := ret.Get(0).(func(user.AuthenticatedUsername) ([]T, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(user.AuthenticatedUsername) []T); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	if rf, ok := ret.Get(1).(func(user.AuthenticatedUsername) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindAllByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByUsername'
type MockRepository_FindAllByUsername_Call[T Token] struct {
	*mock.Call
}

// FindAllByUsername is a helper method to define mock.On call
//   - username user.AuthenticatedUsername
func (_e *MockRepository_Expecter[T]) FindAllByUsername(username interface{}) *MockRepository_FindAllByUsername_Call[T] {
	return &MockRepository_FindAllByUsername_Call[T]{Call: _e.mock.On("FindAllByUsername", username)}
}

func (_c *MockRepository_FindAllByUsername_Call[T]) Run(run func(username user.AuthenticatedUsername)) *MockRepository_FindAllByUsername_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(user.AuthenticatedUsername))
	})
	return _c
}

func (_c *MockRepository_FindAllByUsername_Call[T]) Return(_a0 []T, _a1 error) *MockRepository_FindAllByUsername_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindAllByUsername_Call[T]) RunAndReturn(run func(user.AuthenticatedUsername) ([]T, error)) *MockRepository_FindAllByUsername_Call[T] {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockRepository[T]) FindById(id uuid.UUID) (T, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (T, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) T); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockRepository_FindById_Call[T Token] struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockRepository_Expecter[T]) FindById(id interface{}) *MockRepository_FindById_Call[T] {
	return &MockRepository_FindById_Call[T]{Call: _e.mock.On("FindById", id)}
}

func (_c *MockRepository_FindById_Call[T]) Run(run func(id uuid.UUID)) *MockRepository_FindById_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_FindById_Call[T]) Return(_a0 T, _a1 error) *MockRepository_FindById_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_FindById_Call[T]) RunAndReturn(run func(uuid.UUID) (T, error)) *MockRepository_FindById_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: new
func (_m *MockRepository[T]) Insert(new T) error {
	ret := _m.Called(new)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(T) error); ok {
		r0 = rf(new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockRepository_Insert_Call[T Token] struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - new T
func (_e *MockRepository_Expecter[T]) Insert(new interface{}) *MockRepository_Insert_Call[T] {
	return &MockRepository_Insert_Call[T]{Call: _e.mock.On("Insert", new)}
}

func (_c *MockRepository_Insert_Call[T]) Run(run func(new T)) *MockRepository_Insert_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockRepository_Insert_Call[T]) Return(_a0 error) *MockRepository_Insert_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Insert_Call[T]) RunAndReturn(run func(T) error) *MockRepository_Insert_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository[T Token](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository[T] {
	mock := &MockRepository[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
