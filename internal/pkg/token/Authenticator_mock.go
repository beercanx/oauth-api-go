// Code generated by mockery. DO NOT EDIT.

package token

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator[T Token] struct {
	mock.Mock
}

type MockAuthenticator_Expecter[T Token] struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator[T]) EXPECT() *MockAuthenticator_Expecter[T] {
	return &MockAuthenticator_Expecter[T]{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: _a0
func (_m *MockAuthenticator[T]) Authenticate(_a0 uuid.UUID) (T, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (T, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) T); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthenticator_Authenticate_Call[T Token] struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *MockAuthenticator_Expecter[T]) Authenticate(_a0 interface{}) *MockAuthenticator_Authenticate_Call[T] {
	return &MockAuthenticator_Authenticate_Call[T]{Call: _e.mock.On("Authenticate", _a0)}
}

func (_c *MockAuthenticator_Authenticate_Call[T]) Run(run func(_a0 uuid.UUID)) *MockAuthenticator_Authenticate_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call[T]) Return(_a0 T, _a1 error) *MockAuthenticator_Authenticate_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call[T]) RunAndReturn(run func(uuid.UUID) (T, error)) *MockAuthenticator_Authenticate_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator[T Token](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator[T] {
	mock := &MockAuthenticator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
