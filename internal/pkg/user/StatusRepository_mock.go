// Code generated by mockery. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockStatusRepository is an autogenerated mock type for the StatusRepository type
type MockStatusRepository struct {
	mock.Mock
}

type MockStatusRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatusRepository) EXPECT() *MockStatusRepository_Expecter {
	return &MockStatusRepository_Expecter{mock: &_m.Mock}
}

// FindByUsername provides a mock function with given fields: username
func (_m *MockStatusRepository) FindByUsername(username string) (Status, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 Status
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Status, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) Status); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(Status)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatusRepository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockStatusRepository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockStatusRepository_Expecter) FindByUsername(username interface{}) *MockStatusRepository_FindByUsername_Call {
	return &MockStatusRepository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", username)}
}

func (_c *MockStatusRepository_FindByUsername_Call) Run(run func(username string)) *MockStatusRepository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStatusRepository_FindByUsername_Call) Return(_a0 Status, _a1 error) *MockStatusRepository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatusRepository_FindByUsername_Call) RunAndReturn(run func(string) (Status, error)) *MockStatusRepository_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: status
func (_m *MockStatusRepository) Insert(status Status) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Status) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStatusRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockStatusRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - status Status
func (_e *MockStatusRepository_Expecter) Insert(status interface{}) *MockStatusRepository_Insert_Call {
	return &MockStatusRepository_Insert_Call{Call: _e.mock.On("Insert", status)}
}

func (_c *MockStatusRepository_Insert_Call) Run(run func(status Status)) *MockStatusRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Status))
	})
	return _c
}

func (_c *MockStatusRepository_Insert_Call) Return(_a0 error) *MockStatusRepository_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatusRepository_Insert_Call) RunAndReturn(run func(Status) error) *MockStatusRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatusRepository creates a new instance of MockStatusRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatusRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatusRepository {
	mock := &MockStatusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
