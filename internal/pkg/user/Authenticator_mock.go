// Code generated by mockery. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: username, password
func (_m *MockAuthenticator) Authenticate(username string, password string) (Authenticated, error) {
	ret := _m.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 Authenticated
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (Authenticated, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) Authenticated); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(Authenticated)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockAuthenticator_Expecter) Authenticate(username interface{}, password interface{}) *MockAuthenticator_Authenticate_Call {
	return &MockAuthenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", username, password)}
}

func (_c *MockAuthenticator_Authenticate_Call) Run(run func(username string, password string)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) Return(_a0 Authenticated, _a1 error) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) RunAndReturn(run func(string, string) (Authenticated, error)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
