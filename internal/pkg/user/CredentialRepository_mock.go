// Code generated by mockery. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockCredentialRepository is an autogenerated mock type for the CredentialRepository type
type MockCredentialRepository struct {
	mock.Mock
}

type MockCredentialRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentialRepository) EXPECT() *MockCredentialRepository_Expecter {
	return &MockCredentialRepository_Expecter{mock: &_m.Mock}
}

// FindByUsername provides a mock function with given fields: username
func (_m *MockCredentialRepository) FindByUsername(username string) (Credential, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (Credential, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) Credential); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(Credential)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentialRepository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockCredentialRepository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockCredentialRepository_Expecter) FindByUsername(username interface{}) *MockCredentialRepository_FindByUsername_Call {
	return &MockCredentialRepository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", username)}
}

func (_c *MockCredentialRepository_FindByUsername_Call) Run(run func(username string)) *MockCredentialRepository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCredentialRepository_FindByUsername_Call) Return(_a0 Credential, _a1 error) *MockCredentialRepository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentialRepository_FindByUsername_Call) RunAndReturn(run func(string) (Credential, error)) *MockCredentialRepository_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: new
func (_m *MockCredentialRepository) Insert(new Credential) error {
	ret := _m.Called(new)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(Credential) error); ok {
		r0 = rf(new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentialRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockCredentialRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - new Credential
func (_e *MockCredentialRepository_Expecter) Insert(new interface{}) *MockCredentialRepository_Insert_Call {
	return &MockCredentialRepository_Insert_Call{Call: _e.mock.On("Insert", new)}
}

func (_c *MockCredentialRepository_Insert_Call) Run(run func(new Credential)) *MockCredentialRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Credential))
	})
	return _c
}

func (_c *MockCredentialRepository_Insert_Call) Return(_a0 error) *MockCredentialRepository_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentialRepository_Insert_Call) RunAndReturn(run func(Credential) error) *MockCredentialRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentialRepository creates a new instance of MockCredentialRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentialRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentialRepository {
	mock := &MockCredentialRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
