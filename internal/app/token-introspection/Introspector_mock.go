// Code generated by mockery. DO NOT EDIT.

package token_introspection

import mock "github.com/stretchr/testify/mock"

// MockIntrospector is an autogenerated mock type for the Introspector type
type MockIntrospector struct {
	mock.Mock
}

type MockIntrospector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIntrospector) EXPECT() *MockIntrospector_Expecter {
	return &MockIntrospector_Expecter{mock: &_m.Mock}
}

// introspect provides a mock function with given fields: _a0
func (_m *MockIntrospector) introspect(_a0 request) (response, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for introspect")
	}

	var r0 response
	var r1 error
	if rf, ok := ret.Get(0).(func(request) (response, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(request) response); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(response)
	}

	if rf, ok := ret.Get(1).(func(request) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIntrospector_introspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'introspect'
type MockIntrospector_introspect_Call struct {
	*mock.Call
}

// introspect is a helper method to define mock.On call
//   - _a0 request
func (_e *MockIntrospector_Expecter) introspect(_a0 interface{}) *MockIntrospector_introspect_Call {
	return &MockIntrospector_introspect_Call{Call: _e.mock.On("introspect", _a0)}
}

func (_c *MockIntrospector_introspect_Call) Run(run func(_a0 request)) *MockIntrospector_introspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(request))
	})
	return _c
}

func (_c *MockIntrospector_introspect_Call) Return(_a0 response, _a1 error) *MockIntrospector_introspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIntrospector_introspect_Call) RunAndReturn(run func(request) (response, error)) *MockIntrospector_introspect_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIntrospector creates a new instance of MockIntrospector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIntrospector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIntrospector {
	mock := &MockIntrospector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
